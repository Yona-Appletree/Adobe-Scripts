// Switch Profiles v.9//// created by JK Keller, dilettante coder// http://jk-keller.com//// I WOULDN'T USE THIS AS IS. PROCESSING IS SO MUCH BETTER AT THIS MANIPULATION...// Must have PSD file ordered:// 	guideFrom// 	guideTo// 	imageFrom// 	imageTo// enable double clicking from the Macintosh Finder or the Windows Explorer #target photoshop// in case we double clicked the file app.bringToFront();var docRef = app.activeDocumentvar activeLayerName = docRef.activeLayer.name;app.preferences.rulerUnits = Units.PIXELS app.displayDialogs = DialogModes.NO// select guideFrom layerdocRef.activeLayer = docRef.layers["guideFrom"];// Script looks for white pixelsvar checkColor = new SolidColor();checkColor.rgb.red   = 255;checkColor.rgb.green = 255;checkColor.rgb.blue  = 255;//var docWidth = 10;  // quick debug loopvar docWidth = docRef.width;var docHeight = docRef.height;////////////////// check////////////////// checkvar aHeights = new Array();// get start location !!! should be in the thin white area var horizonVal = prompt("x location of horizon line?", "4068")*1;var jFromStart = horizonVal-20;var jFromStartHold = jFromStart;var jFromEnd = horizonVal+20;var jFromEndHold = jFromStart;var jToStart = horizonVal-20;var jToStartHold = jToStart;var jToEnd = horizonVal+20;var jToEndHold = jToStart;var jFromStartDirection = "downFromStart";var jFromEndDirection = "downFromEnd";var jToStartDirection = "downToStart";var jToEndDirection = "downToEnd";// get pixel color (from xbytor http://www.ps-scripts.com/bb/viewtopic.php?=&p=3078)function getColorAt(pDoc, x, y) {	selectBounds(pDoc, [x, y, x+1, y+1]);	var pColor = new SolidColor();   	pColor.rgb.red   = findPV(pDoc.channels["Red"].histogram);	pColor.rgb.green = findPV(pDoc.channels["Green"].histogram)	pColor.rgb.blue  = findPV(pDoc.channels["Blue"].histogram);	pDoc.selection.deselect(); // or, even better, undo		return pColor;};function selectBounds(pDoc, pRect) {	pDoc.selection.select([[ pRect[0], pRect[1] ],[ pRect[2], pRect[1] ],[ pRect[2], pRect[3] ],[ pRect[0], pRect[3] ]]);}function findPV(pHist) {	for (var i = 0; i <= 255; i++ ) {		if (pHist[i]) { return i; }	}	return 0;}// cycle through the entire width of imagefor (var i=0; i<docWidth; i++) {	// make sure guideFrom is visible and active	docRef.layers["guideFrom"].visible = true;	docRef.activeLayer = docRef.layers["guideFrom"];		// Check pixels in the up direction until hit black	if (jFromStartDirection == "upFromStart") {		for (var j=jFromStart; j>0; j--) {			var tColor = getColorAt(docRef, i, j);			if (tColor.rgb.red != checkColor.rgb.red || tColor.rgb.green != checkColor.rgb.green || tColor.rgb.blue != checkColor.rgb.blue) {				jFromStart = j;				jFromStartDirection = "downFromStart";				break;			};		};	};	// check for white pixel in down direction and 	for (var j=jFromStart; j<docHeight; j++) {		var tColor = getColorAt(docRef, i, j);		if (tColor.rgb.red == checkColor.rgb.red && tColor.rgb.green == checkColor.rgb.green && tColor.rgb.blue == checkColor.rgb.blue) {			jFromStartHold = j;			jFromStart = j;			jFromStartDirection = "upFromStart";			break;		};	};	// Check pixels in the down direction until hit black	if (jFromEndDirection == "downFromEnd") {		for (var j=jFromEnd; j<docHeight; j++) {			var tColor = getColorAt(docRef, i, j);			if (tColor.rgb.red != checkColor.rgb.red || tColor.rgb.green != checkColor.rgb.green || tColor.rgb.blue != checkColor.rgb.blue) {				jFromEnd = j;				jFromEndDirection = "upFromEnd";				break;			};		};	};	// check for white pixel in up direction and 	for (var j=jFromEnd; j>0; j--) {		var tColor = getColorAt(docRef, i, j);		if (tColor.rgb.red == checkColor.rgb.red && tColor.rgb.green == checkColor.rgb.green && tColor.rgb.blue == checkColor.rgb.blue) {			jFromEndHold = j;			jFromEnd = j;			jFromEndDirection = "downFromEnd";			break;		};	};	// turn off guideFrom layer and turn on and select guideTo layer	docRef.layers["guideFrom"].visible = false;	docRef.layers["guideTo"].visible = true;	docRef.activeLayer = docRef.layers["guideTo"];		if (jToStartDirection == "upToStart") {		for (var j=jToStart; j>0; j--) {			var tColor = getColorAt(docRef, i, j);			if (tColor.rgb.red != checkColor.rgb.red || tColor.rgb.green != checkColor.rgb.green || tColor.rgb.blue != checkColor.rgb.blue) {				jToStart = j;				jToStartDirection = "downToStart";				break;			};		};	};	for (var j=jToStart; j<docHeight; j++) {		var tColor = getColorAt(docRef, i, j);		if (tColor.rgb.red == checkColor.rgb.red && tColor.rgb.green == checkColor.rgb.green && tColor.rgb.blue == checkColor.rgb.blue) {			jToStartHold = j;			jToStart = j;			jToStartDirection = "upToStart";			break;		};	};	// Check pixels in the down direction until hit black	if (jToEndDirection == "downToEnd") {		for (var j=jToEnd; j<docHeight; j++) {			var tColor = getColorAt(docRef, i, j);			if (tColor.rgb.red != checkColor.rgb.red || tColor.rgb.green != checkColor.rgb.green || tColor.rgb.blue != checkColor.rgb.blue) {				jToEnd = j;				jToEndDirection = "upToEnd";				break;			};		};	};	// check for white pixel in up direction and 	for (var j=jToEnd; j>0; j--) {		var tColor = getColorAt(docRef, i, j);		if (tColor.rgb.red == checkColor.rgb.red && tColor.rgb.green == checkColor.rgb.green && tColor.rgb.blue == checkColor.rgb.blue) {			jToEndHold = j;			jToEnd = j;			jToEndDirection = "downToEnd";			break;		};	};	// turn off guideTo layer and turn on and select imageFrom layer	docRef.layers["guideTo"].visible = false;	docRef.layers["imageFrom"].visible = true;	docRef.activeLayer = docRef.layers["imageFrom"];	//aHeights.push(j);	var FromSize= jFromEndHold - jFromStartHold;	var ToSize= jToEndHold - jToStartHold;	var FromToScale= FromSize/ToSize*100;	var ToFromScale= ToSize/FromSize*100				selectBounds(docRef, [i, 0, i+1, docHeight]);	docRef.selection.resize(100,ToFromScale);//	docRef.selection.translate(0,xMove);	docRef.selection.deselect();	// turn off guideTo layer and turn on and select imageFrom layer	docRef.layers["imageFrom"].visible = false;	docRef.layers["imageTo"].visible = true;	docRef.activeLayer = docRef.layers["imageTo"];	selectBounds(docRef, [i, 0, i+1, docHeight]);	docRef.selection.resize(100,FromToScale);//	docRef.selection.translate(0,xMove);	docRef.selection.deselect();// How to move based on resize?????};alert("done?!!?");// docRef.close();